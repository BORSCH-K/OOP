package lab_5

// при создании экземпляра указываем тип :
// val a : StateList<Int> = StateList(...)

class StateList<T>(
        init: T, // ???
        // история игры?
        val array: ArrayList<T> = ArrayList()
) {

    val state: T
        get() {
            // .last() - выбирает последний элемент
            return array.last()
//            return array[array.size-1]
        }

    // добавиление состояния в историю состояний
    fun add(state: T) {
        array.add(state)
    }

    // не используется
    fun move(to: Int): T {
        try {
            return array[to]
        } catch (e: GameException) {
            throw WrongCommandException("Введена неправильная команда!")
        }
    }
    /*В классе нужно реализовать две функции:
fun add(state: T) – для добавления нового состояния после хода и
fun move(to: Int): T для перехода к состоянию с индексом to.
В случае, если состояние с индексом to отсутствует в массиве состояния,
функция fun move(to: Int): T должна выбросить исключение WrongCommandException.

Также в класс нужно добавить свойство state – текущее состояние (как и раньше,
оно не хранится отдельно, а выбирается геттером из массива состояний).

Класс-перечисление Turn имеет два объекта, один соответствует «крестику»,
другой – «нолику». Также в классе нужно определить функцию next(), которая
возвращает противоположный для текущего объекта объект типа Turn, и функцию toString().*/
}